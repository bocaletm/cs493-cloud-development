{
	"info": {
		"_postman_id": "f9ecf5bf-43f0-4fa0-ac2f-cac65058d6b5",
		"name": "hw7-bocaletm",
		"description": "This collection tests the API specification given for Assignment 3.\nIn order to run this collection, you need an environment which has the following 3 environment variables pre-defined:\n\napp_url\n- Set this to your app. E.g., when running locally set it to http://localhost:8080. When running the app on GCP. set it to https://myapp.appsport.com\n\ninvalid_boat_id\n- Set it to a value that's not an ID of any boat in your project. I have set it to 1 and that should work for you as well.\n- \n\ninvalid_slip_id\n- Set it to a value that's not an ID of any slip in your porject. I have set it to 1 and that should work for you as well.\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "add boat with missing attributes 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9baa1221-d30e-4666-a9f9-2e4d59e91d4e",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"The request object is missing at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Aquila\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "bad post url redirect",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "16311987-1dab-4a64-af59-0510ad6275e6",
						"exec": [
							"pm.test(\"301 status code\", function () {",
							"    pm.response.to.have.status(301);",
							"});",
							"",
							"pm.test(\"location header matches app url\", function () {",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats\";",
							"     pm.expect(postman.getResponseHeader(\"Location\")).eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Aquila\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats/",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with special characters in name 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1d2e9f2-9cb5-4eca-8150-fa26b7a14207",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Senec@\",\r\n  \"type\": \"Navis\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with name too long 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "62926251-dde2-49bd-8150-0ed78028e275",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Lorem ipsum dolor sit amet  consectetur adipiscing elit  Nam faucibus lectus nec eros interdum pharetra  In egestas odio ex  non pharetra massa hendrerit non  Orci varius natoque penatibus et magnis dis parturient montes  nascetur ridiculus mus  Duis orci \",\r\n  \"type\": \"Navis\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with name too short 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d978b324-1606-4462-9604-d67da50e2c7b",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"fi\",\r\n  \"type\": \"Navis\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with special characters in type 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2dc29083-0ba4-478e-bf66-4edb16156fbd",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Seneca\",\r\n  \"type\": \"Nav!s\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with type too long 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "32da93e8-e0fd-4eac-9ba1-971e84ebf6f2",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Seneca\",\r\n  \"type\": \"Lorem ipsum dolor sit amet  consectetur adipiscing elit  Nam faucibus lectus nec eros interdum pharetra  In egestas odio ex  non pharetra massa hendrerit non  Orci varius natoque penatibus et magnis dis parturient montes  nascetur ridiculus mus  Duis orci \",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with type too short 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "82c723a1-774d-4fc1-8142-8e54a895745f",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Seneca\",\r\n  \"type\": \"fi\",\r\n  \"length\": 200\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with too long length 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "49606e29-e195-4908-aa1e-76d1a7e7df0f",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid data for at least one of the required attributes\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n  \"name\": \"Seneca\",\r\n  \"type\": \"Navis\",\r\n  \"length\": 10000\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with id 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c43afcff-87d1-4431-ba20-6afa53495ef3",
						"exec": [
							"",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(400);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\":123,\r\n  \"name\": \"Aquila\",\r\n  \"type\": \"Quinquereme\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with no token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d432eb5-8f83-4044-9922-9285f86e9157",
						"exec": [
							"",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\":123,\r\n  \"name\": \"Aquila\",\r\n  \"type\": \"Quinquereme\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat with invalid token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "333a0ecf-05fc-4b58-8216-9796c9bdbbc0",
						"exec": [
							"",
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalidToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"id\":123,\r\n  \"name\": \"Aquila\",\r\n  \"type\": \"Quinquereme\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats for owner check none 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abb1d95b-5045-49e2-9c22-f5abf4ae3974",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"No boat exists\", function () {",
							"    pm.expect(pm.response.json()['boats'].length).to.eq(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{owner}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{owner}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats for owner without token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0e72063b-d0e7-471f-883b-73dbb2385e83",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{owner}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{owner}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats for owner with invalid token 401",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6fa7b8b-17a1-4cdb-b4df-4675668db599",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(401);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{invalidToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{owner}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{owner}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat that does not exist 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1b4615f9-2dd6-4b73-a075-cf63541493d4",
						"exec": [
							"pm.test(\"403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add boat 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "0a8caab9-570d-4dae-a776-aae4b68f0bd6",
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.environment.set(\"boat1_id\", pm.response.json()[\"id\"]);",
							"    pm.environment.set(\"owner\", pm.response.json()[\"owner\"]);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Aquila\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Quinquereme\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(500);",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats/\" + pm.response.json()[\"id\"];",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Aquila\",\r\n  \"type\": \"Quinquereme\",\r\n  \"length\": 500\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats for owner page 1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dd2681ff-2421-4914-bdc5-d9f2e0039ff8",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function () {",
							"    pm.expect(pm.response.json()['boats'].length).to.be.at.least(1);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{owner}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{owner}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats for owner page 1 bad token 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "87d64aae-b478-486b-88f6-f1ee63b05aac",
						"exec": [
							"pm.test(\"403 status code\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{altToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/owners/{{owner}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"owners",
						"{{owner}}",
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_1 bad token 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d1c11b6d-3d8a-484c-9eff-ba774234b921",
						"exec": [
							"pm.test(\"403\", function () {",
							"    pm.response.to.have.status(403);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{altToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "add second boat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2c55fa24-8f03-48d4-8e67-829e303d500d",
						"exec": [
							"",
							"pm.test(\"201 status code\", function () {",
							"    pm.response.to.have.status(201);",
							"    pm.environment.set(\"boat2_id\", pm.response.json()[\"id\"]);",
							"});",
							"",
							"",
							"pm.test(\"content is valid\", function () {",
							"    pm.expect(pm.response.json()[\"name\"]).to.eq(\"Corvus\");",
							"    pm.expect(pm.response.json()[\"type\"]).to.eq(\"Trireme\");",
							"    pm.expect(pm.response.json()[\"length\"]).to.eq(100);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"name\": \"Corvus\",\r\n  \"type\": \"Trireme\",\r\n  \"length\": 100\r\n}"
				},
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "bad get url redirect",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "2af8e295-6b2b-455b-89ca-f7674f12a978",
						"exec": [
							"pm.test(\"301 status code\", function () {",
							"    pm.response.to.have.status(301);",
							"});",
							"",
							"pm.test(\"location header matches app url\", function () {",
							"    const self_url = pm.environment.get(\"app_url\") + \"/boats\";",
							"     pm.expect(postman.getResponseHeader(\"Location\")).eq(self_url);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats page 1 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "89e05a33-e5f2-4475-9793-82492238ca7f",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"At least one boat exists\", function(){",
							"   pm.expect(Object.keys(pm.response.json()).length).to.be.at.least(1);",
							"});",
							"",
							"pm.environment.set(\"next_boats\", pm.response.json()[\"next\"]);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete root url 405",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "45204bf9-3555-42a8-953d-940bfb20456a",
						"exec": [
							"pm.test(\"400 status code\", function () {",
							"    pm.response.to.have.status(405);",
							"});",
							"",
							"pm.test(\"400 error message\", function () {",
							"     pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Method not allowed\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat with invalid id 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "532c4936-675f-4cc9-8a79-ab10e228615b",
						"exec": [
							"pm.test(\"403 forbidden\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"",
							"pm.test(\"403 error message\", function () {",
							"    pm.expect(pm.response.json()[\"Error\"]).to.eq(\"Invalid id\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/abc",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"abc"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_1 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e9a7c931-9157-4b95-8af5-b685054cae86",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat1_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat1_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete boat_2 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f74c206f-c0bd-45fb-8909-eadefefd3344",
						"exec": [
							"pm.test(\"204 no content\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats/{{boat2_id}}",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats",
						"{{boat2_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all boats check none 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fc42de6b-de80-483d-b7cf-dc9d2bb7baa3",
						"exec": [
							"pm.test(\"200 status code\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"No boat exists\", function () {",
							"    pm.expect(pm.response.json()['boats'].length).to.eq(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{app_url}}/boats",
					"host": [
						"{{app_url}}"
					],
					"path": [
						"boats"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "cb30a851-8684-4357-8341-4ab17e3a57e3",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "34ae0983-c8c6-4875-b8d5-03eb78e2cf6d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}